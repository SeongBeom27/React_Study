{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\n\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\n\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\n\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 3; // insert 가 호출 될 때마다 1씩 더해집니다.\n\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  done: false\n}));\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nconst initialState = {\n  input: '',\n  todos: [{\n    id: 1,\n    text: '리덕스 기초 배우기',\n    done: true\n  }, {\n    id: 2,\n    text: '리액트와 리덕스 사용하기',\n    done: false\n  }]\n};\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT]: (state, {\n    payload: todo\n  }) => produce(state, draft => {\n    draft.todos.push(todo);\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.done = !todo.done;\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const index = draft.todos.findIndex(todo => todo.id === id);\n    draft.todos.splice(index, 1);\n  })\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["/Users/lgh12/Web/React_Tech/react-redux-tutorial/src/modules/todos.js"],"names":["createAction","handleActions","produce","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","id","insert","text","done","toggle","remove","initialState","todos","state","payload","draft","todo","push","find","index","findIndex","splice"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;AAC3C,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAE/B,OAAO,MAAMC,WAAW,GAAGP,YAAY,CAACG,YAAD,EAAgBK,KAAD,IAAWA,KAA1B,CAAhC;AAEP,IAAIC,EAAE,GAAG,CAAT,C,CAAY;;AACZ,OAAO,MAAMC,MAAM,GAAGV,YAAY,CAACI,MAAD,EAAUO,IAAD,KAAW;AACpDF,EAAAA,EAAE,EAAEA,EAAE,EAD8C;AAEpDE,EAAAA,IAFoD;AAGpDC,EAAAA,IAAI,EAAE;AAH8C,CAAX,CAAT,CAA3B;AAMP,OAAO,MAAMC,MAAM,GAAGb,YAAY,CAACK,MAAD,EAAUI,EAAD,IAAQA,EAAjB,CAA3B;AACP,OAAO,MAAMK,MAAM,GAAGd,YAAY,CAACM,MAAD,EAAUG,EAAD,IAAQA,EAAjB,CAA3B;AAEP,MAAMM,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,EADY;AAEnBQ,EAAAA,KAAK,EAAE,CACL;AACEP,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADK,EAML;AACEH,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANK;AAFY,CAArB;AAgBA,MAAMI,KAAK,GAAGf,aAAa,CACzB;AACE,GAACE,YAAD,GAAgB,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEV;AAAX,GAAR,KACdN,OAAO,CAACe,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACX,KAAN,GAAcA,KAAd;AACD,GAFM,CAFX;AAKE,GAACJ,MAAD,GAAU,CAACa,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAR,KACRlB,OAAO,CAACe,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACH,KAAN,CAAYK,IAAZ,CAAiBD,IAAjB;AACD,GAFM,CANX;AASE,GAACf,MAAD,GAAU,CAACY,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAET;AAAX,GAAR,KACRP,OAAO,CAACe,KAAD,EAASE,KAAD,IAAW;AACxB,UAAMC,IAAI,GAAGD,KAAK,CAACH,KAAN,CAAYM,IAAZ,CAAkBF,IAAD,IAAUA,IAAI,CAACX,EAAL,KAAYA,EAAvC,CAAb;AACAW,IAAAA,IAAI,CAACR,IAAL,GAAY,CAACQ,IAAI,CAACR,IAAlB;AACD,GAHM,CAVX;AAcE,GAACN,MAAD,GAAU,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAET;AAAX,GAAR,KACRP,OAAO,CAACe,KAAD,EAASE,KAAD,IAAW;AACxB,UAAMI,KAAK,GAAGJ,KAAK,CAACH,KAAN,CAAYQ,SAAZ,CAAuBJ,IAAD,IAAUA,IAAI,CAACX,EAAL,KAAYA,EAA5C,CAAd;AACAU,IAAAA,KAAK,CAACH,KAAN,CAAYS,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACD,GAHM;AAfX,CADyB,EAqBzBR,YArByB,CAA3B;AAwBA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\n\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nlet id = 3; // insert 가 호출 될 때마다 1씩 더해집니다.\nexport const insert = createAction(INSERT, (text) => ({\n  id: id++,\n  text,\n  done: false,\n}));\n\nexport const toggle = createAction(TOGGLE, (id) => id);\nexport const remove = createAction(REMOVE, (id) => id);\n\nconst initialState = {\n  input: '',\n  todos: [\n    {\n      id: 1,\n      text: '리덕스 기초 배우기',\n      done: true,\n    },\n    {\n      id: 2,\n      text: '리액트와 리덕스 사용하기',\n      done: false,\n    },\n  ],\n};\n\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) =>\n      produce(state, (draft) => {\n        draft.input = input;\n      }),\n    [INSERT]: (state, { payload: todo }) =>\n      produce(state, (draft) => {\n        draft.todos.push(todo);\n      }),\n    [TOGGLE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        todo.done = !todo.done;\n      }),\n    [REMOVE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const index = draft.todos.findIndex((todo) => todo.id === id);\n        draft.todos.splice(index, 1);\n      }),\n  },\n  initialState,\n);\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}