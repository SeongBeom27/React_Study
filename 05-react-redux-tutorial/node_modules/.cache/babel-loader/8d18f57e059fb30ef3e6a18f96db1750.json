{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer'; // 액션 타입 정의 : '모듈 이름/액션 이름', 액션 타입은 대문자로 정의\n\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\n\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\n\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\n\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n// 액션 생성 함수 만들기\n// 액션 타입에 각 각의 함수를 생성\n// export const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nexport const changeInput = input => ({\n  type: CHANGE_INPUT,\n  input\n});\nlet id = 3;\nexport const insert = text => ({\n  type: INSERT,\n  todo: {\n    id: id++,\n    text,\n    done: false\n  }\n});\nexport const toggle = id => ({\n  type: TOGGLE,\n  id\n});\nexport const remove = id => ({\n  type: REMOVE,\n  id\n}); // 초기 상태 및 리듀서 함수 만들기\n\nconst initialState = {\n  input: '',\n  todos: [{\n    id: 1,\n    text: '리덕스 기초 배우기',\n    done: true\n  }, {\n    id: 2,\n    text: '리액트와 리덕스 사용하기',\n    done: false\n  }]\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      produce(state, draft => {\n        draft.input = input;\n      });\n\n    case INSERT:\n      return { ...state,\n        todos: state.todos.concat(action.todo)\n      };\n\n    case TOGGLE:\n      return { ...state,\n        todos: state.todos.map(todo => todo.id === action.id ? { ...todo,\n          done: !todo.done\n        } : todo)\n      };\n\n    case REMOVE:\n      return { ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"sources":["/Users/lgh12/Web/React_Tech/react-redux-tutorial/src/modules/todos.js"],"names":["createAction","handleActions","produce","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","type","id","insert","text","todo","done","toggle","remove","initialState","todos","state","action","draft","concat","map","filter"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,OAAP,MAAoB,OAApB,C,CAEA;;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;AAC3C,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;AAE/B;AACA;AAEA;;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAEN,YAD+B;AAErCK,EAAAA;AAFqC,CAAZ,CAApB;AAKP,IAAIE,EAAE,GAAG,CAAT;AACA,OAAO,MAAMC,MAAM,GAAIC,IAAD,KAAW;AAC/BH,EAAAA,IAAI,EAAEL,MADyB;AAE/BS,EAAAA,IAAI,EAAE;AACJH,IAAAA,EAAE,EAAEA,EAAE,EADF;AAEJE,IAAAA,IAFI;AAGJE,IAAAA,IAAI,EAAE;AAHF;AAFyB,CAAX,CAAf;AASP,OAAO,MAAMC,MAAM,GAAIL,EAAD,KAAS;AAC7BD,EAAAA,IAAI,EAAEJ,MADuB;AAE7BK,EAAAA;AAF6B,CAAT,CAAf;AAKP,OAAO,MAAMM,MAAM,GAAIN,EAAD,KAAS;AAC7BD,EAAAA,IAAI,EAAEH,MADuB;AAE7BI,EAAAA;AAF6B,CAAT,CAAf,C,CAKP;;AACA,MAAMO,YAAY,GAAG;AACnBT,EAAAA,KAAK,EAAE,EADY;AAEnBU,EAAAA,KAAK,EAAE,CACL;AACER,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,YAFR;AAGEE,IAAAA,IAAI,EAAE;AAHR,GADK,EAML;AACEJ,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,eAFR;AAGEE,IAAAA,IAAI,EAAE;AAHR,GANK;AAFY,CAArB;;AAgBA,MAAMI,KAAK,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACX,IAAf;AACE,SAAKN,YAAL;AACED,MAAAA,OAAO,CAACiB,KAAD,EAASE,KAAD,IAAW;AACxBA,QAAAA,KAAK,CAACb,KAAN,GAAcA,KAAd;AACD,OAFM,CAAP;;AAGF,SAAKJ,MAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYI,MAAZ,CAAmBF,MAAM,CAACP,IAA1B;AAFF,OAAP;;AAIF,SAAKR,MAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,GAAZ,CAAiBV,IAAD,IACrBA,IAAI,CAACH,EAAL,KAAYU,MAAM,CAACV,EAAnB,GAAwB,EAAE,GAAGG,IAAL;AAAWC,UAAAA,IAAI,EAAE,CAACD,IAAI,CAACC;AAAvB,SAAxB,GAAwDD,IADnD;AAFF,OAAP;;AAMF,SAAKP,MAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYM,MAAZ,CAAoBX,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYU,MAAM,CAACV,EAAhD;AAFF,OAAP;;AAIF;AACE,aAAOS,KAAP;AAvBJ;AAyBD,CA1BD;;AA4BA,eAAeD,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\n\n// 액션 타입 정의 : '모듈 이름/액션 이름', 액션 타입은 대문자로 정의\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n\n// 액션 생성 함수 만들기\n// 액션 타입에 각 각의 함수를 생성\n\n// export const changeInput = createAction(CHANGE_INPUT, (input) => input);\nexport const changeInput = (input) => ({\n  type: CHANGE_INPUT,\n  input,\n});\n\nlet id = 3;\nexport const insert = (text) => ({\n  type: INSERT,\n  todo: {\n    id: id++,\n    text,\n    done: false,\n  },\n});\n\nexport const toggle = (id) => ({\n  type: TOGGLE,\n  id,\n});\n\nexport const remove = (id) => ({\n  type: REMOVE,\n  id,\n});\n\n// 초기 상태 및 리듀서 함수 만들기\nconst initialState = {\n  input: '',\n  todos: [\n    {\n      id: 1,\n      text: '리덕스 기초 배우기',\n      done: true,\n    },\n    {\n      id: 2,\n      text: '리액트와 리덕스 사용하기',\n      done: false,\n    },\n  ],\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      produce(state, (draft) => {\n        draft.input = input;\n      });\n    case INSERT:\n      return {\n        ...state,\n        todos: state.todos.concat(action.todo),\n      };\n    case TOGGLE:\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === action.id ? { ...todo, done: !todo.done } : todo,\n        ),\n      };\n    case REMOVE:\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.id),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}