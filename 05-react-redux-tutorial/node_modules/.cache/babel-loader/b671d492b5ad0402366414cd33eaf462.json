{"ast":null,"code":"var _jsxFileName = \"/Users/lgh12/Web/React_Tech/react-redux-tutorial/src/containers/CounterContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Counter from '../components/Counter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CounterContainer = ({\n  number,\n  increase,\n  decrease\n}) => {\n  return /*#__PURE__*/_jsxDEV(Counter, {\n    number: number,\n    onIncrease: increase,\n    onDecrease: decrease\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n/**\n * @brief    리덕스 스토어 안의 상태를 컴포넌트의 props로 넘겨주기 위해 설정하는 함수\n * @param    state\n */\n\n\n_c = CounterContainer;\n\nconst mapStateToProps = state => ({\n  number: state.counter.number\n});\n/**\n * @brief    액션 생성 함수를 컴포넌트의 props로 넘겨주기 위해 사용하는 함수\n * @param    dispatch\n */\n\n\nconst mapDispatchToProps = dispatch => ({\n  // 임시 함수\n  increase: () => {\n    console.log('increase');\n  },\n  decrease: () => {\n    console.log('decrease');\n  }\n});\n/**\n * CounterContainer 컴포넌트를 리덕스와 연동시키기 위해서는 react-redux에서 제공하는 connect함수를 사용해야 한다.\n *\n * mapStateToProps와 mapDispatchProps에서 반환하는 객체 내부의 값들은 컴포넌트의 props로 전달된다.\n *\n * mapStateToProps는 state를 파라미터로 받아옴\n *\n *\n * @returns     function             : 컴포넌트를 파라미터로 넘겨주면 리덕스와 연동된 컴포넌트가 만들어져서 반환된다.\n */\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"CounterContainer\");","map":{"version":3,"sources":["/Users/lgh12/Web/React_Tech/react-redux-tutorial/src/containers/CounterContainer.js"],"names":["React","connect","Counter","CounterContainer","number","increase","decrease","mapStateToProps","state","counter","mapDispatchToProps","dispatch","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA;AAApB,CAAD,KAAoC;AAC3D,sBACE,QAAC,OAAD;AACE,IAAA,MAAM,EAAEF,MADV;AAEE,IAAA,UAAU,EAAEC,QAFd;AAGE,IAAA,UAAU,EAAEC;AAHd;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CARD;AAUA;AACA;AACA;AACA;;;KAbMH,gB;;AAcN,MAAMI,eAAe,GAAIC,KAAD,KAAY;AAClCJ,EAAAA,MAAM,EAAEI,KAAK,CAACC,OAAN,CAAcL;AADY,CAAZ,CAAxB;AAIA;AACA;AACA;AACA;;;AACA,MAAMM,kBAAkB,GAAIC,QAAD,KAAe;AACxC;AACAN,EAAAA,QAAQ,EAAE,MAAM;AACdO,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,GAJuC;AAKxCP,EAAAA,QAAQ,EAAE,MAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;AAPuC,CAAf,CAA3B;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeZ,OAAO,CAACM,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CP,gBAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Counter from '../components/Counter';\n\nconst CounterContainer = ({ number, increase, decrease }) => {\n  return (\n    <Counter\n      number={number}\n      onIncrease={increase}\n      onDecrease={decrease}\n    ></Counter>\n  );\n};\n\n/**\n * @brief    리덕스 스토어 안의 상태를 컴포넌트의 props로 넘겨주기 위해 설정하는 함수\n * @param    state\n */\nconst mapStateToProps = (state) => ({\n  number: state.counter.number,\n});\n\n/**\n * @brief    액션 생성 함수를 컴포넌트의 props로 넘겨주기 위해 사용하는 함수\n * @param    dispatch\n */\nconst mapDispatchToProps = (dispatch) => ({\n  // 임시 함수\n  increase: () => {\n    console.log('increase');\n  },\n  decrease: () => {\n    console.log('decrease');\n  },\n});\n\n/**\n * CounterContainer 컴포넌트를 리덕스와 연동시키기 위해서는 react-redux에서 제공하는 connect함수를 사용해야 한다.\n *\n * mapStateToProps와 mapDispatchProps에서 반환하는 객체 내부의 값들은 컴포넌트의 props로 전달된다.\n *\n * mapStateToProps는 state를 파라미터로 받아옴\n *\n *\n * @returns     function             : 컴포넌트를 파라미터로 넘겨주면 리덕스와 연동된 컴포넌트가 만들어져서 반환된다.\n */\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterContainer);\n"]},"metadata":{},"sourceType":"module"}