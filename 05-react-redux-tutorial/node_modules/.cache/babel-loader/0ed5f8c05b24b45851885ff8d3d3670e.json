{"ast":null,"code":"import { createAction } from 'redux-actions'; // 액션 타입 정의 : '모듈 이름/액션 이름', 액션 타입은 대문자로 정의\n\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\n\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\n\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\n\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n// 액션 생성 함수 만들기\n// 액션 타입에 각 각의 함수를 생성\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 3;\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  done: false\n})); // export const insert = (text) => ({\n//   type: INSERT,\n//   todo: {\n//     id: id++,\n//     text,\n//     done: false,\n//   },\n// });\n\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id); // 초기 상태 및 리듀서 함수 만들기\n\nconst initialState = {\n  input: '',\n  todos: [{\n    id: 1,\n    text: '리덕스 기초 배우기',\n    done: true\n  }, {\n    id: 2,\n    text: '리액트와 리덕스 사용하기',\n    done: false\n  }]\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return { ...state,\n        input: action.input\n      };\n\n    case INSERT:\n      return { ...state,\n        todos: state.todos.concat(action.todo)\n      };\n\n    case TOGGLE:\n      return { ...state,\n        todos: state.todos.map(todo => todo.id === action.id ? { ...todo,\n          done: !todo.done\n        } : todo)\n      };\n\n    case REMOVE:\n      return { ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"sources":["/Users/lgh12/Web/React_Tech/react-redux-tutorial/src/modules/todos.js"],"names":["createAction","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","id","insert","text","done","toggle","remove","initialState","todos","state","action","type","concat","todo","map","filter"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B,C,CAEA;;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;AAC3C,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;AAE/B;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGL,YAAY,CAACC,YAAD,EAAgBK,KAAD,IAAWA,KAA1B,CAAhC;AAEP,IAAIC,EAAE,GAAG,CAAT;AACA,OAAO,MAAMC,MAAM,GAAGR,YAAY,CAACE,MAAD,EAAUO,IAAD,KAAW;AACpDF,EAAAA,EAAE,EAAEA,EAAE,EAD8C;AAEpDE,EAAAA,IAFoD;AAGpDC,EAAAA,IAAI,EAAE;AAH8C,CAAX,CAAT,CAA3B,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,MAAM,GAAGX,YAAY,CAACG,MAAD,EAAUI,EAAD,IAAQA,EAAjB,CAA3B;AACP,OAAO,MAAMK,MAAM,GAAGZ,YAAY,CAACI,MAAD,EAAUG,EAAD,IAAQA,EAAjB,CAA3B,C,CAEP;;AACA,MAAMM,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,EADY;AAEnBQ,EAAAA,KAAK,EAAE,CACL;AACEP,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADK,EAML;AACEH,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANK;AAFY,CAArB;;AAgBA,MAAMI,KAAK,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKhB,YAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELT,QAAAA,KAAK,EAAEU,MAAM,CAACV;AAFT,OAAP;;AAIF,SAAKJ,MAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYI,MAAZ,CAAmBF,MAAM,CAACG,IAA1B;AAFF,OAAP;;AAIF,SAAKhB,MAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYM,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAACZ,EAAL,KAAYS,MAAM,CAACT,EAAnB,GAAwB,EAAE,GAAGY,IAAL;AAAWT,UAAAA,IAAI,EAAE,CAACS,IAAI,CAACT;AAAvB,SAAxB,GAAwDS,IADnD;AAFF,OAAP;;AAMF,SAAKf,MAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYO,MAAZ,CAAoBF,IAAD,IAAUA,IAAI,CAACZ,EAAL,KAAYS,MAAM,CAACT,EAAhD;AAFF,OAAP;;AAIF;AACE,aAAOQ,KAAP;AAxBJ;AA0BD,CA3BD;;AA6BA,eAAeD,KAAf","sourcesContent":["import { createAction } from 'redux-actions';\n\n// 액션 타입 정의 : '모듈 이름/액션 이름', 액션 타입은 대문자로 정의\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n\n// 액션 생성 함수 만들기\n// 액션 타입에 각 각의 함수를 생성\n\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nlet id = 3;\nexport const insert = createAction(INSERT, (text) => ({\n  id: id++,\n  text,\n  done: false,\n}));\n\n// export const insert = (text) => ({\n//   type: INSERT,\n//   todo: {\n//     id: id++,\n//     text,\n//     done: false,\n//   },\n// });\n\nexport const toggle = createAction(TOGGLE, (id) => id);\nexport const remove = createAction(REMOVE, (id) => id);\n\n// 초기 상태 및 리듀서 함수 만들기\nconst initialState = {\n  input: '',\n  todos: [\n    {\n      id: 1,\n      text: '리덕스 기초 배우기',\n      done: true,\n    },\n    {\n      id: 2,\n      text: '리액트와 리덕스 사용하기',\n      done: false,\n    },\n  ],\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return {\n        ...state,\n        input: action.input,\n      };\n    case INSERT:\n      return {\n        ...state,\n        todos: state.todos.concat(action.todo),\n      };\n    case TOGGLE:\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === action.id ? { ...todo, done: !todo.done } : todo,\n        ),\n      };\n    case REMOVE:\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.id),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}