{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions'; // 액션 타입 정의 : '모듈 이름/액션 이름', 액션 타입은 대문자로 정의\n\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\n\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\n\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\n\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n// 액션 생성 함수 만들기\n// 액션 타입에 각 각의 함수를 생성\n// export const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nexport const changeInput = input => ({\n  type: CHANGE_INPUT,\n  input\n});\nlet id = 3;\nexport const insert = text => ({\n  type: INSERT,\n  todo: {\n    id: id++,\n    text,\n    done: false\n  }\n});\nexport const toggle = id => ({\n  type: TOGGLE,\n  id\n});\nexport const remove = id => ({\n  type: REMOVE,\n  id\n}); // 초기 상태 및 리듀서 함수 만들기\n\nconst initialState = {\n  input: '',\n  todos: [{\n    id: 1,\n    text: '리덕스 기초 배우기',\n    done: true\n  }, {\n    id: 2,\n    text: '리액트와 리덕스 사용하기',\n    done: false\n  }]\n};\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT]: (state, {\n    payload: todo\n  }) => produce(state, draft => {\n    draft.todos.push(todo);\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.done = !todo.done;\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const index = draft.todos.findIndex(todo => todo.id === id);\n    draft.todos.splice(index, 1);\n  })\n}, initialState); // const todos = (state = initialState, action) => {\n//   switch (action.type) {\n//     case CHANGE_INPUT:\n//       return {\n//         ...state,\n//         input: action.input,\n//       };\n//     case INSERT:\n//       return {\n//         ...state,\n//         todos: state.todos.concat(action.todo),\n//       };\n//     case TOGGLE:\n//       return {\n//         ...state,\n//         todos: state.todos.map((todo) =>\n//           todo.id === action.id ? { ...todo, done: !todo.done } : todo,\n//         ),\n//       };\n//     case REMOVE:\n//       return {\n//         ...state,\n//         todos: state.todos.filter((todo) => todo.id !== action.id),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default todos;","map":{"version":3,"sources":["/Users/lgh12/Web/React_Tech/react-redux-tutorial/src/modules/todos.js"],"names":["createAction","handleActions","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","type","id","insert","text","todo","done","toggle","remove","initialState","todos","state","payload","produce","draft","push","find","index","findIndex","splice"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\n\n// 액션 타입 정의 : '모듈 이름/액션 이름', 액션 타입은 대문자로 정의\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함\nconst INSERT = 'todos/INSERT'; // 새로운 todo 를 등록함\nconst TOGGLE = 'todos/TOGGLE'; // todo 를 체크/체크해제 함\nconst REMOVE = 'todos/REMOVE'; // todo 를 제거함\n\n// 액션 생성 함수 만들기\n// 액션 타입에 각 각의 함수를 생성\n\n// export const changeInput = createAction(CHANGE_INPUT, (input) => input);\nexport const changeInput = (input) => ({\n  type: CHANGE_INPUT,\n  input,\n});\n\nlet id = 3;\nexport const insert = (text) => ({\n  type: INSERT,\n  todo: {\n    id: id++,\n    text,\n    done: false,\n  },\n});\n\nexport const toggle = (id) => ({\n  type: TOGGLE,\n  id,\n});\n\nexport const remove = (id) => ({\n  type: REMOVE,\n  id,\n});\n\n// 초기 상태 및 리듀서 함수 만들기\nconst initialState = {\n  input: '',\n  todos: [\n    {\n      id: 1,\n      text: '리덕스 기초 배우기',\n      done: true,\n    },\n    {\n      id: 2,\n      text: '리액트와 리덕스 사용하기',\n      done: false,\n    },\n  ],\n};\n\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) =>\n      produce(state, (draft) => {\n        draft.input = input;\n      }),\n    [INSERT]: (state, { payload: todo }) =>\n      produce(state, (draft) => {\n        draft.todos.push(todo);\n      }),\n    [TOGGLE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        todo.done = !todo.done;\n      }),\n    [REMOVE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const index = draft.todos.findIndex((todo) => todo.id === id);\n        draft.todos.splice(index, 1);\n      }),\n  },\n  initialState,\n);\n// const todos = (state = initialState, action) => {\n//   switch (action.type) {\n//     case CHANGE_INPUT:\n//       return {\n//         ...state,\n//         input: action.input,\n//       };\n//     case INSERT:\n//       return {\n//         ...state,\n//         todos: state.todos.concat(action.todo),\n//       };\n//     case TOGGLE:\n//       return {\n//         ...state,\n//         todos: state.todos.map((todo) =>\n//           todo.id === action.id ? { ...todo, done: !todo.done } : todo,\n//         ),\n//       };\n//     case REMOVE:\n//       return {\n//         ...state,\n//         todos: state.todos.filter((todo) => todo.id !== action.id),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}