{"ast":null,"code":"var _jsxFileName = \"/Users/lgh12/Web/Book/React_Tech/todo-app/src/components/TodoListItem.js\";\nimport React, { useState } from 'react';\nimport { MdCheckBoxOutlineBlank, MdCheckBox, MdRemoveCircleOutline } from 'react-icons/md';\nimport cn from 'classnames';\nimport './TodoListItem.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoListItem = ({\n  todo,\n  onRemove,\n  onToggle\n}) => {\n  const {\n    id,\n    text,\n    checked\n  } = todo; // TODO: cn 확인하기\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TodoListItem\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: cn('checkbox', {\n        checked\n      }),\n      onClick: () => onToggle(id),\n      children: [checked ? /*#__PURE__*/_jsxDEV(MdCheckBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MdCheckBoxOutlineBlank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"remove\",\n      onClick: () => onRemove(id),\n      children: /*#__PURE__*/_jsxDEV(MdRemoveCircleOutline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}; // React.memo 함수 사용 시 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정된다.\n// 즉, 이 케이스의 경우 todo, onRemove, onToggle이 바뀌지 않으면 리렌더링하지 않음\n// 하지만 현재 todos 배열이 업데이트 되면 onRemove, onToggle 함수도 새롭게 바뀌므로 아직 문제가 있음.\n//  => onRemove, onToggle 함수가 배열 상태를 업데이트하는 과정에서 최신 상태의 todos를 참조하기 때문\n// 해결 방법\n//  1. useState의 함수형 업데이트 기능을 사용\n//  2. useReducer를 사용\n\n\n_c = TodoListItem;\nexport default _c2 = /*#__PURE__*/React.memo(TodoListItem);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TodoListItem\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lgh12/Web/Book/React_Tech/todo-app/src/components/TodoListItem.js"],"names":["React","useState","MdCheckBoxOutlineBlank","MdCheckBox","MdRemoveCircleOutline","cn","TodoListItem","todo","onRemove","onToggle","id","text","checked","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,sBADF,EAEEC,UAFF,EAGEC,qBAHF,QAIO,gBAJP;AAKA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAO,qBAAP;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAD,KAAkC;AACrD,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAYC,IAAAA;AAAZ,MAAwBL,IAA9B,CADqD,CAErD;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEF,EAAE,CAAC,UAAD,EAAa;AAAEO,QAAAA;AAAF,OAAb,CAAlB;AAA6C,MAAA,OAAO,EAAE,MAAMH,QAAQ,CAACC,EAAD,CAApE;AAAA,iBACGE,OAAO,gBACN,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADM,gBAGN,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,cAJJ,eAME;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBAAuBD;AAAvB;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,OAAO,EAAE,MAAMH,QAAQ,CAACE,EAAD,CAA/C;AAAA,6BACE,QAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAlBD,C,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAzBMJ,Y;AA0BN,kCAAeN,KAAK,CAACa,IAAN,CAAWP,YAAX,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport {\n  MdCheckBoxOutlineBlank,\n  MdCheckBox,\n  MdRemoveCircleOutline,\n} from 'react-icons/md';\nimport cn from 'classnames';\nimport './TodoListItem.scss';\n\nconst TodoListItem = ({ todo, onRemove, onToggle }) => {\n  const { id, text, checked } = todo;\n  // TODO: cn 확인하기\n  return (\n    <div className=\"TodoListItem\">\n      <div className={cn('checkbox', { checked })} onClick={() => onToggle(id)}>\n        {checked ? (\n          <MdCheckBox></MdCheckBox>\n        ) : (\n          <MdCheckBoxOutlineBlank></MdCheckBoxOutlineBlank>\n        )}\n        <div className=\"text\">{text}</div>\n      </div>\n      <div className=\"remove\" onClick={() => onRemove(id)}>\n        <MdRemoveCircleOutline></MdRemoveCircleOutline>\n      </div>\n    </div>\n  );\n};\n// React.memo 함수 사용 시 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정된다.\n// 즉, 이 케이스의 경우 todo, onRemove, onToggle이 바뀌지 않으면 리렌더링하지 않음\n// 하지만 현재 todos 배열이 업데이트 되면 onRemove, onToggle 함수도 새롭게 바뀌므로 아직 문제가 있음.\n//  => onRemove, onToggle 함수가 배열 상태를 업데이트하는 과정에서 최신 상태의 todos를 참조하기 때문\n// 해결 방법\n//  1. useState의 함수형 업데이트 기능을 사용\n//  2. useReducer를 사용\nexport default React.memo(TodoListItem);\n"]},"metadata":{},"sourceType":"module"}