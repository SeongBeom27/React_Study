{"ast":null,"code":"var _jsxFileName = \"/Users/lgh12/Web/Book/React_Tech/todo-app/src/components/TodoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { List } from 'react-virtualized';\nimport TodoListItem from './TodoListItem';\nimport './TodoList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoList = ({\n  todos,\n  onRemove,\n  onToggle\n}) => {\n  _s();\n\n  const rowRenderer = useCallback(({\n    index,\n    key,\n    style\n  }) => {\n    const todo = todos[index];\n    return /*#__PURE__*/_jsxDEV(TodoListItem, {\n      todo: todo,\n      onRemove: onRemove,\n      onToggle: onToggle,\n      style: style\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this);\n  }, [onRemove, onToggle, todos]);\n  return /*#__PURE__*/_jsxDEV(List, {\n    className: \"TodoList\",\n    width: 512,\n    height: 513,\n    rowCount: todos.length,\n    rowHeight: 57,\n    rowRenderer: rowRenderer,\n    list: todos,\n    style: {\n      outline: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}; // React.memo 함수 사용 시 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정된다.\n// 즉, 이 케이스의 경우 todo, onRemove, onToggle이 바뀌지 않으면 리렌더링하지 않음\n// 하지만 현재 todos 배열이 업데이트 되면 onRemove, onToggle 함수도 새롭게 바뀌므로 아직 문제가 있음.\n//  => onRemove, onToggle 함수가 배열 상태를 업데이트하는 과정에서 최신 상태의 todos를 참조하기 때문\n// 해결 방법\n//  1. useState의 함수형 업데이트 기능을 사용  => 이 방법으로 구현\n//  2. useReducer를 사용                 => 로직을 컴포넌트 밖으로 둘 수 있으니 별개로 확인해보기\n\n\n_s(TodoList, \"N2TsfEjgV7Bg/mPHdEYC3quykYY=\");\n\n_c = TodoList;\nexport default _c2 = /*#__PURE__*/React.memo(TodoList);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TodoList\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lgh12/Web/Book/React_Tech/todo-app/src/components/TodoList.js"],"names":["React","useCallback","List","TodoListItem","TodoList","todos","onRemove","onToggle","rowRenderer","index","key","style","todo","length","outline","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,iBAAP;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAD,KAAmC;AAAA;;AAClD,QAAMC,WAAW,GAAGP,WAAW,CAC7B,CAAC;AAAEQ,IAAAA,KAAF;AAASC,IAAAA,GAAT;AAAcC,IAAAA;AAAd,GAAD,KAA2B;AACzB,UAAMC,IAAI,GAAGP,KAAK,CAACI,KAAD,CAAlB;AACA,wBACE,QAAC,YAAD;AACE,MAAA,IAAI,EAAEG,IADR;AAGE,MAAA,QAAQ,EAAEN,QAHZ;AAIE,MAAA,QAAQ,EAAEC,QAJZ;AAKE,MAAA,KAAK,EAAEI;AALT,OAEOD,GAFP;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAZ4B,EAa7B,CAACJ,QAAD,EAAWC,QAAX,EAAqBF,KAArB,CAb6B,CAA/B;AAeA,sBACE,QAAC,IAAD;AACE,IAAA,SAAS,EAAC,UADZ;AAEE,IAAA,KAAK,EAAE,GAFT;AAGE,IAAA,MAAM,EAAE,GAHV;AAIE,IAAA,QAAQ,EAAEA,KAAK,CAACQ,MAJlB;AAKE,IAAA,SAAS,EAAE,EALb;AAME,IAAA,WAAW,EAAEL,WANf;AAOE,IAAA,IAAI,EAAEH,KAPR;AAQE,IAAA,KAAK,EAAE;AAAES,MAAAA,OAAO,EAAE;AAAX;AART;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA5BD,C,CA8BA;AACA;AACA;AACA;AACA;AACA;AACA;;;GApCMV,Q;;KAAAA,Q;AAqCN,kCAAeJ,KAAK,CAACe,IAAN,CAAWX,QAAX,CAAf","sourcesContent":["import React, { useCallback } from 'react';\nimport { List } from 'react-virtualized';\nimport TodoListItem from './TodoListItem';\nimport './TodoList.scss';\n\nconst TodoList = ({ todos, onRemove, onToggle }) => {\n  const rowRenderer = useCallback(\n    ({ index, key, style }) => {\n      const todo = todos[index];\n      return (\n        <TodoListItem\n          todo={todo}\n          key={key}\n          onRemove={onRemove}\n          onToggle={onToggle}\n          style={style}\n        ></TodoListItem>\n      );\n    },\n    [onRemove, onToggle, todos],\n  );\n  return (\n    <List\n      className=\"TodoList\"\n      width={512}\n      height={513}\n      rowCount={todos.length}\n      rowHeight={57}\n      rowRenderer={rowRenderer}\n      list={todos}\n      style={{ outline: 'none' }}\n    ></List>\n  );\n};\n\n// React.memo 함수 사용 시 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정된다.\n// 즉, 이 케이스의 경우 todo, onRemove, onToggle이 바뀌지 않으면 리렌더링하지 않음\n// 하지만 현재 todos 배열이 업데이트 되면 onRemove, onToggle 함수도 새롭게 바뀌므로 아직 문제가 있음.\n//  => onRemove, onToggle 함수가 배열 상태를 업데이트하는 과정에서 최신 상태의 todos를 참조하기 때문\n// 해결 방법\n//  1. useState의 함수형 업데이트 기능을 사용  => 이 방법으로 구현\n//  2. useReducer를 사용                 => 로직을 컴포넌트 밖으로 둘 수 있으니 별개로 확인해보기\nexport default React.memo(TodoList);\n"]},"metadata":{},"sourceType":"module"}