{"ast":null,"code":"var _jsxFileName = \"/Users/lgh12/Web/Book/React_Tech/my-react/hooks-app/src/Info.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // useEffect\n// 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook\n// 클래스 컴포넌트의 componentDidMount, componentDidUpdate를 합친 형태와 같다\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Info = () => {\n  _s();\n\n  // hook의 useState\n  // value    :     첫번째 원소로 상태 값\n  // setValue :     두번째 원소값 상태를 설정하는 함수\n  //                이 함수에 상태 상태 변수 파라미터를 넣어서 호출하면 전달 받은 파라미터로 값이 바뀌고 component가\n  //                rerendering 된다\n  const [name, setName] = useState('');\n  const [nickname, setNickname] = useState(''); // 마운트 될때만 실행하고 싶을 경우\n  //   useEffect(() => {\n  //     console.log('렌더링이 완료되었습니다')\n  //     console.log({\n  //       name,\n  //       nickname,\n  //     })\n  //   }, [])\n  // 특정 값이 업데이트될 때만 실행하고 싶을 때\n\n  useEffect(() => {\n    console.log(name);\n  }, [name]);\n\n  const onChangeName = e => {\n    setName(e.target.value);\n  };\n\n  const onChangeNickname = e => {\n    setNickname(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: onChangeName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: nickname,\n      onChange: onChangeNickname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\uC774\\uB984:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), \" \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\uB2C9\\uB124\\uC784:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), \" \", nickname]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Info, \"VN5YNEsXq/akm5eSs11UDM6W0Rk=\");\n\n_c = Info;\nexport default Info;\n\nvar _c;\n\n$RefreshReg$(_c, \"Info\");","map":{"version":3,"sources":["/Users/lgh12/Web/Book/React_Tech/my-react/hooks-app/src/Info.js"],"names":["React","useState","useEffect","Info","name","setName","nickname","setNickname","console","log","onChangeName","e","target","value","onChangeNickname"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;AACA;AACA;;;;AACA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC,CAPiB,CAQjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMM,YAAY,GAAGC,CAAC,IAAI;AACxBN,IAAAA,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAGH,CAAC,IAAI;AAC5BJ,IAAAA,WAAW,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAO,MAAA,KAAK,EAAET,IAAd;AAAoB,MAAA,QAAQ,EAAEM;AAA9B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,KAAK,EAAEJ,QAAd;AAAwB,MAAA,QAAQ,EAAEQ;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACcV,IADd;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACeE,QADf;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA5CD;;GAAMH,I;;KAAAA,I;AA8CN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n// useEffect\n// 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook\n// 클래스 컴포넌트의 componentDidMount, componentDidUpdate를 합친 형태와 같다\nconst Info = () => {\n  // hook의 useState\n  // value    :     첫번째 원소로 상태 값\n  // setValue :     두번째 원소값 상태를 설정하는 함수\n  //                이 함수에 상태 상태 변수 파라미터를 넣어서 호출하면 전달 받은 파라미터로 값이 바뀌고 component가\n  //                rerendering 된다\n  const [name, setName] = useState('')\n  const [nickname, setNickname] = useState('')\n  // 마운트 될때만 실행하고 싶을 경우\n  //   useEffect(() => {\n  //     console.log('렌더링이 완료되었습니다')\n  //     console.log({\n  //       name,\n  //       nickname,\n  //     })\n  //   }, [])\n\n  // 특정 값이 업데이트될 때만 실행하고 싶을 때\n  useEffect(() => {\n    console.log(name)\n  }, [name])\n\n  const onChangeName = e => {\n    setName(e.target.value)\n  }\n\n  const onChangeNickname = e => {\n    setNickname(e.target.value)\n  }\n\n  return (\n    <div>\n      <input value={name} onChange={onChangeName} />\n      <input value={nickname} onChange={onChangeNickname} />\n      <div>\n        <div>\n          <b>이름:</b> {name}\n        </div>\n        <div>\n          <b>닉네임:</b> {nickname}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Info\n"]},"metadata":{},"sourceType":"module"}