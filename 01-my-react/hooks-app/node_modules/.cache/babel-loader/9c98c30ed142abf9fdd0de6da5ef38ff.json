{"ast":null,"code":"var _jsxFileName = \"/Users/lgh12/Web/Book/React_Tech/my-react/hooks-app/src/Average.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getAverage = numbers => {\n  console.log('평균값 계산중 ...');\n  if (numbers.length === 0) return 0;\n  const sum = numbers.reduce((a, b) => a + b);\n  return sum / numbers.length;\n};\n\nconst Average = () => {\n  _s();\n\n  const [list, setList] = useState([]);\n  const [number, setNumber] = useState(''); // input 내용이 바뀔때마다 평균값을 계산하고 있다.\n\n  const onChange = useCallback(e => {\n    setNumber(e.target.value);\n  }, []);\n  const onInsert = useCallback(() => {\n    // parseInt : Convert string to int\n    const nextList = list.concat(parseInt(number));\n    setList(nextList); // 리스트에 넣은 값은 초기화 시켜준다.\n\n    setNumber('');\n  }, [number, list]); // number 혹은 list가 바뀌었을 때만 함수 생성\n  // 렌더링 과정에서 특정 값 (두번째 인자인 list)이 바뀌었을 경우만 연산을 실행\n  // 원하는 값이 바뀌지 않았다면 이전 연산 결과를 다시 사용\n\n  const avg = useMemo(() => getAverage(list), [list]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: number,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onInsert,\n      children: \"\\uB4F1\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map((value, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"\\uD3C9\\uADE0\\uAC12: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), \" \", avg]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Average, \"JzjtdaKvRHthybrT/XMawaReOK4=\");\n\n_c = Average;\nexport default Average;\n\nvar _c;\n\n$RefreshReg$(_c, \"Average\");","map":{"version":3,"sources":["/Users/lgh12/Web/Book/React_Tech/my-react/hooks-app/src/Average.js"],"names":["React","useState","useMemo","useCallback","getAverage","numbers","console","log","length","sum","reduce","a","b","Average","list","setList","number","setNumber","onChange","e","target","value","onInsert","nextList","concat","parseInt","avg","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;;;AAEA,MAAMC,UAAU,GAAGC,OAAO,IAAI;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,MAAIF,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B,OAAO,CAAP;AAC1B,QAAMC,GAAG,GAAGJ,OAAO,CAACK,MAAR,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA7B,CAAZ;AACA,SAAOH,GAAG,GAAGJ,OAAO,CAACG,MAArB;AACD,CALD;;AAOA,MAAMK,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC,CAFoB,CAIpB;;AACA,QAAMiB,QAAQ,GAAGf,WAAW,CAACgB,CAAC,IAAI;AAChCF,IAAAA,SAAS,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GAF2B,EAEzB,EAFyB,CAA5B;AAIA,QAAMC,QAAQ,GAAGnB,WAAW,CAAC,MAAM;AACjC;AACA,UAAMoB,QAAQ,GAAGT,IAAI,CAACU,MAAL,CAAYC,QAAQ,CAACT,MAAD,CAApB,CAAjB;AACAD,IAAAA,OAAO,CAACQ,QAAD,CAAP,CAHiC,CAIjC;;AACAN,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAN2B,EAMzB,CAACD,MAAD,EAASF,IAAT,CANyB,CAA5B,CAToB,CAeD;AAEnB;AACA;;AACA,QAAMY,GAAG,GAAGxB,OAAO,CAAC,MAAME,UAAU,CAACU,IAAD,CAAjB,EAAyB,CAACA,IAAD,CAAzB,CAAnB;AAEA,sBACE;AAAA,4BACE;AAAO,MAAA,KAAK,EAAEE,MAAd;AAAsB,MAAA,QAAQ,EAAEE;AAAhC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEI,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBACGR,IAAI,CAACa,GAAL,CAAS,CAACN,KAAD,EAAQO,KAAR,kBACR;AAAA,kBAAiBP;AAAjB,SAASO,KAAT;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,OACgBF,GADhB;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAnCD;;GAAMb,O;;KAAAA,O;AAqCN,eAAeA,OAAf","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react'\n\nconst getAverage = numbers => {\n  console.log('평균값 계산중 ...')\n  if (numbers.length === 0) return 0\n  const sum = numbers.reduce((a, b) => a + b)\n  return sum / numbers.length\n}\n\nconst Average = () => {\n  const [list, setList] = useState([])\n  const [number, setNumber] = useState('')\n\n  // input 내용이 바뀔때마다 평균값을 계산하고 있다.\n  const onChange = useCallback(e => {\n    setNumber(e.target.value)\n  }, [])\n\n  const onInsert = useCallback(() => {\n    // parseInt : Convert string to int\n    const nextList = list.concat(parseInt(number))\n    setList(nextList)\n    // 리스트에 넣은 값은 초기화 시켜준다.\n    setNumber('')\n  }, [number, list]) // number 혹은 list가 바뀌었을 때만 함수 생성\n\n  // 렌더링 과정에서 특정 값 (두번째 인자인 list)이 바뀌었을 경우만 연산을 실행\n  // 원하는 값이 바뀌지 않았다면 이전 연산 결과를 다시 사용\n  const avg = useMemo(() => getAverage(list), [list])\n\n  return (\n    <div>\n      <input value={number} onChange={onChange} />\n      <button onClick={onInsert}>등록</button>\n      <ul>\n        {list.map((value, index) => (\n          <li key={index}>{value}</li>\n        ))}\n      </ul>\n      <div>\n        <b>평균값: </b> {avg}\n      </div>\n    </div>\n  )\n}\n\nexport default Average\n"]},"metadata":{},"sourceType":"module"}